version: "1.0"
specification:
  name: dropbox
  summary: Source and destination connector for Dropbox.
  description: |
    ## Source

    The Dropbox Source Connector reads files from a configured Dropbox path and converts
    them into `opencdc.Record` that can be processed by Conduit. Files larger than
    `fileChunkSizeBytes` (maximum value 4MB) are split into smaller chunks, and each
    chunk is emitted as a separate record.

    ### Snapshot (Initial Sync)

    When the connector starts without a saved position, it triggers a snapshot listing
    all files in the configured Dropbox path. A cursor and the last processed timestamp
    are saved at the end of snapshotting.

    ### Change Data Capture

    After the snapshot, the connector uses Dropbox's Longpoll API to wait for changes
    (file creation, modification, deletion). Upon detecting changes, it fetches updated
    entries using the saved cursor. If Dropbox reports expired cursor the connector
    falls back to a fresh scan skipping already-processed files based on the
    `lastProcessedUnixTime` field.

    Each record have following metadata fields to support downstream file reassembly:

    * `opencdc.file.name`: Name of the file with extension.
    * `file_id`: Unique Dropbox file ID.
    * `file_path`: Full path of the file in Dropbox (e.g., `/Photos/Vacation/image.jpg`).
    * `opencdc.collection`: Path to the parent directory containing the file (e.g., `/Photos/Vacation`).
    * `opencdc.file.size`: Integer size of the file.
    * `opencdc.file.chunked`: "true" if the file was split into multiple chunks; otherwise false or not present.
    * `opencdc.file.chunk.index`: Index of the current chunk (starting from 1) – only present for chunks.
    * `opencdc.file.chunk.count`: Total number of chunks – only present for chunked files.
    * `opencdc.file.hash`: A hash of the file content. This field can be used to verify data integrity.

    ## Destination

    A destination connector pushes data from upstream resources to an external
    resource via Conduit.

    Each record should have following metadata fields:

    * `opencdc.file.name`: Name of the file with extension.
    * `opencdc.collection`: (Optional) Target directory path. Defaults to root `/` if not specified.
    * `opencdc.file.size`: Integer size of the file.
    * `opencdc.file.chunked`: "true" if the file was split into multiple chunks; otherwise false or not present.
    * `opencdc.file.chunk.index`: Index of the current chunk (1-based index, required only for chunked files).
    * `opencdc.file.chunk.count`: Total number of chunks (required only for chunked files).
    * `opencdc.file.hash`: A hash to uniquely identify the file.
  version: v0.1.0
  author: Meroxa, Inc.
  source:
    parameters:
      - name: token
        description: Token is used to authenticate API access.
        type: string
        default: ""
        validations:
          - type: required
            value: ""
      - name: fileChunkSizeBytes
        description: Size of a file chunk in bytes to split large files, maximum is 4MB.
        type: int
        default: "3932160"
        validations: []
      - name: longpollTimeout
        description: Timeout for Dropbox longpolling requests.
        type: duration
        default: 30s
        validations: []
      - name: path
        description: Path of the Dropbox directory to read/write files. Empty path implies root directory.
        type: string
        default: ""
        validations: []
      - name: retries
        description: Maximum number of retry attempts.
        type: int
        default: "0"
        validations: []
      - name: retryDelay
        description: Delay between retry attempts.
        type: duration
        default: 10s
        validations: []
      - name: sdk.batch.delay
        description: Maximum delay before an incomplete batch is read from the source.
        type: duration
        default: "0"
        validations: []
      - name: sdk.batch.size
        description: Maximum size of batch before it gets read from the source.
        type: int
        default: "0"
        validations:
          - type: greater-than
            value: "-1"
      - name: sdk.schema.context.enabled
        description: |-
          Specifies whether to use a schema context name. If set to false, no schema context name will
          be used, and schemas will be saved with the subject name specified in the connector
          (not safe because of name conflicts).
        type: bool
        default: "true"
        validations: []
      - name: sdk.schema.context.name
        description: |-
          Schema context name to be used. Used as a prefix for all schema subject names.
          If empty, defaults to the connector ID.
        type: string
        default: ""
        validations: []
      - name: sdk.schema.extract.key.enabled
        description: Whether to extract and encode the record key with a schema.
        type: bool
        default: "true"
        validations: []
      - name: sdk.schema.extract.key.subject
        description: |-
          The subject of the key schema. If the record metadata contains the field
          "opencdc.collection" it is prepended to the subject name and separated
          with a dot.
        type: string
        default: key
        validations: []
      - name: sdk.schema.extract.payload.enabled
        description: Whether to extract and encode the record payload with a schema.
        type: bool
        default: "false"
        validations: []
      - name: sdk.schema.extract.payload.subject
        description: |-
          The subject of the payload schema. If the record metadata contains the
          field "opencdc.collection" it is prepended to the subject name and
          separated with a dot.
        type: string
        default: payload
        validations: []
      - name: sdk.schema.extract.type
        description: The type of the payload schema.
        type: string
        default: avro
        validations:
          - type: inclusion
            value: avro
  destination:
    parameters:
      - name: token
        description: Token is used to authenticate API access.
        type: string
        default: ""
        validations:
          - type: required
            value: ""
      - name: path
        description: Path of the Dropbox directory to read/write files. Empty path implies root directory.
        type: string
        default: ""
        validations: []
      - name: sdk.batch.delay
        description: Maximum delay before an incomplete batch is written to the destination.
        type: duration
        default: "0"
        validations: []
      - name: sdk.batch.size
        description: Maximum size of batch before it gets written to the destination.
        type: int
        default: "0"
        validations:
          - type: greater-than
            value: "-1"
      - name: sdk.rate.burst
        description: |-
          Allow bursts of at most X records (0 or less means that bursts are not
          limited). Only takes effect if a rate limit per second is set. Note that
          if `sdk.batch.size` is bigger than `sdk.rate.burst`, the effective batch
          size will be equal to `sdk.rate.burst`.
        type: int
        default: "0"
        validations:
          - type: greater-than
            value: "-1"
      - name: sdk.rate.perSecond
        description: Maximum number of records written per second (0 means no rate limit).
        type: float
        default: "0"
        validations:
          - type: greater-than
            value: "-1"
      - name: sdk.record.format
        description: |-
          The format of the output record. See the Conduit documentation for a full
          list of supported formats (https://conduit.io/docs/using/connectors/configuration-parameters/output-format).
        type: string
        default: opencdc/json
        validations: []
      - name: sdk.record.format.options
        description: |-
          Options to configure the chosen output record format. Options are normally
          key=value pairs separated with comma (e.g. opt1=val2,opt2=val2), except
          for the `template` record format, where options are a Go template.
        type: string
        default: ""
        validations: []
      - name: sdk.schema.extract.key.enabled
        description: Whether to extract and decode the record key with a schema.
        type: bool
        default: "true"
        validations: []
      - name: sdk.schema.extract.payload.enabled
        description: Whether to extract and decode the record payload with a schema.
        type: bool
        default: "true"
        validations: []
